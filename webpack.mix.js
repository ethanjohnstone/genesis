const mix = require("laravel-mix");
const mqpacker = require("mqpacker");
require("laravel-mix-eslint");
require("laravel-mix-stylelint");

let localProxy = "genesis.test";
/*
 |--------------------------------------------------------------------------
 | Mix Asset Management
 |--------------------------------------------------------------------------
 |
 | Mix provides a clean, fluent API for defining some Webpack build steps
 | for your Laravel application. By default, we are compiling the Sass
 | file for your application, as well as bundling up your JS files.
 |
 */

const environment = process.env.NODE_ENV;

// ESLint configuration
const eslintRules = {
  development: {
    'no-console': 'off',
  },
  production: {},
};

mix
  .webpackConfig({
    target: 'web',
  })

  .eslint({
    extensions: ['.js'],
    overrideConfig: {
      rules: eslintRules[environment] || {},
    },
  })

  .js([
    'themes/app/javascript/src/main.js',
  ], 'themes/app/javascript/dist/main.js')

  .stylelint({
    configFile: './.stylelintrc.json',
    files: ['css/src/**/*.scss'],
    context: 'themes/app/',
  })

  .sass('themes/app/css/src/main.scss', 'themes/app/css/dist/')
  .sass('themes/app/css/src/editor.scss', 'themes/app/css/dist/')

  .options({
    postCss: [
      mqpacker({ sort: true }), // Combines MediaQueries
    ],
    processCssUrls: false,
  });

// mix.babel([
//     'themes/app/javascript/src/app.js',
//     'themes/app/javascript/src/hamburger.js',
// ], 'themes/app/javascript/dist/app.js')
//     .sass('themes/app/css/src/app.scss', 'themes/app/css/dist/')
//     .sass('themes/app/css/src/editor.scss', 'themes/app/css/dist/')
//     .options({
//         postCss: [
//             require('mqpacker')({sort: true}),    // Combines MediaQueries
//             require('postcss-flexbugs-fixes')           // Fixes FlexBox issues
//         ],
//         processCssUrls: false
//     })
//     .browserSync({
//         proxy: localProxy,
//         injectChanges: true,
//         files: ['themes/app/css/dist/app.css']
//     });

// Full API
// mix.js(src, output);
// mix.react(src, output); <-- Identical to mix.js(), but registers React Babel compilation.
// mix.preact(src, output); <-- Identical to mix.js(), but registers Preact compilation.
// mix.coffee(src, output); <-- Identical to mix.js(), but registers CoffeeScript compilation.
// mix.ts(src, output); <-- TypeScript support. Requires tsconfig.json to exist in the same folder as webpack.mix.js
// mix.extract(vendorLibs);
// mix.sass(src, output);
// mix.less(src, output);
// mix.stylus(src, output);
// mix.postCss(src, output, [require('postcss-some-plugin')()]);
// mix.browserSync('my-site.test');
// mix.combine(files, destination);
// mix.babel(files, destination); <-- Identical to mix.combine(), but also includes Babel compilation.
// mix.copy(from, to);
// mix.copyDirectory(fromDir, toDir);
// mix.minify(file);
// mix.sourceMaps(); // Enable sourcemaps
// mix.version(); // Enable versioning.
// mix.disableNotifications();
// mix.setPublicPath('path/to/public');
// mix.setResourceRoot('prefix/for/resource/locators');
// mix.autoload({}); <-- Will be passed to Webpack's ProvidePlugin.
// mix.webpackConfig({}); <-- Override webpack.config.js, without editing the file directly.
// mix.babelConfig({}); <-- Merge extra Babel configuration (plugins, etc.) with Mix's default.
// mix.then(function () {}) <-- Will be triggered each time Webpack finishes building.
// mix.override(function (webpackConfig) {}) <-- Will be triggered once the webpack config object has been fully generated by Mix.
// mix.dump(); <-- Dump the generated webpack config object to the console.
// mix.extend(name, handler) <-- Extend Mix's API with your own components.
// mix.options({
//   extractVueStyles: false, // Extract .vue component styling to file, rather than inline.
//   globalVueStyles: file, // Variables file to be imported in every component.
//   processCssUrls: true, // Process/optimize relative stylesheet url()'s. Set to false, if you don't want them touched.
//   purifyCss: false, // Remove unused CSS selectors.
//   terser: {}, // Terser-specific options. https://github.com/webpack-contrib/terser-webpack-plugin#options
//   postCss: [] // Post-CSS options: https://github.com/postcss/postcss/blob/master/docs/plugins.md
// });